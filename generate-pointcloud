#!/bin/bash

# Generate a point cloud using a virtual sensor, trajectory, and Arbaro definition.

export readonly name=$( basename $0 )

source $( type -p comma-application-util ) || (error "comma not installed")
function errcho { (>&2 echo "$name: $1") }
function error
{
    errcho "error: $1"
    exit 1
}

function sample_sensor() {
    # echo "ARGS: $@" >&2
    PC=$1
    shift
    threshold=$1
    shift
    SENSOR=$1
    shift
    
    echo -n "." >&2
    i=0
    for line in $@
    do
        ts=$(echo $line | cut -d, -f1)
        frame=$(echo $line | cut -d, -f2-7)
        center=$(echo $line | cut -d, -f2-4)
        # criteria=$(echo $line | cut -d, -f8- |
        # 	sed -r 's/([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+)/x;from=\1;to=\2 y;from=\3;to=\4 z;from=\5;to=\6/')
        i=`expr $i + 1`
        $SENSOR |
        points-frame --from=$frame --binary=ui,7d --fields=,,x,y,z |
        points-frame --from=$frame --binary=ui,7d --fields=,,,,,x,y,z |
        csv-paste "-;binary=ui,7d" "value=$i;binary=ui"
        #		points-join --binary=ui,7d --fields=,,x,y,z --radius=0.05 <(cat $PC | csv-select --binary=3d,2ui --fields=x,y,z $criteria)";binary=3d,2ui;fields=x,y,z" --all 2>/dev/null
        # points-join --binary=ui,7d,ui --fields=,,x,y,z --radius=0.05 "$PC;binary=3d,2ui;fields=x,y,z" --all 2>/dev/null
    done |
    points-join --binary=ui,7d,ui --fields=,,x,y,z --radius=0.05 "$PC;binary=3d,2ui;fields=x,y,z" --all 2>/dev/null |
    points-calc distance --binary=ui,7d,ui,3d,2ui --fields=,,first,second |
    points-calc distance --binary=ui,7d,ui,3d,2ui,d --fields=,,first,,,,,second |
    points-calc distance --binary=ui,7d,ui,3d,2ui,2d --fields=,,,,,first,,second |
    csv-shuffle --binary=ui,7d,ui,3d,2ui,3d --fields=i,r,,,,,,,uid,x,y,z,cl,seg,d1,d2,d3 -o=uid,i,r,x,y,z,d1,d2,d3,cl,seg |
    csv-eval --binary=2ui,d,3d,3d,2ui --fields=,,,,,,a,b,c "d=where(abs(b+c-a) < $threshold,1,0)" --output-format=ui |
    csv-select --binary=2ui,d,3d,3d,3ui --fields=,,,,,,,,,,,d "d;equals=1" |
    csv-shuffle --binary=2ui,d,3d,3d,3ui --fields=uid,i,r,x,y,z,,,,cl,seg -o=uid,i,r,x,y,z,cl,seg |
    csv-sort --binary=2ui,d,3d,2ui --fields=id,id,r --min |
    csv-shuffle --binary=2ui,d,3d,2ui --fields=,i,r,x,y,z,cl,seg -o=i,r,x,y,z,cl,seg
    [[ $verbose ]] && echo "$i" >&2
}

# TODO: Add gaussian noise to these points.
function make_ground() {
    sizeX=$1
    sizeY=$2
    res=$3
    [[ $verbose ]] && echo "Making ground" >&2
    for x in `seq 0 $res $sizeX`
    do
        seq 0 $res $sizeY | xargs -n1 -P8 -i bash -c "echo $x,{},0.1,0"
    done | csv-to-bin 3d,ui |
    csv-eval --binary=3d,ui --fields=x,y,z,i "x=x-$sizeX/2;y=y-$sizeY/2"
}


function go_sensor() {
    ARBARO=$1
    TRAJ=$2
    SENSOR=$3
    GROUND=`mktemp`
    ref_frame=$4
    sizeX=$5
    sizeY=$6
    noise=$7
    
    size=$($SENSOR | csv-from-bin ui,7d | wc -l | csv-eval --fields=x "x=x*2" --format=ui)
    
    # sizeBounds=$($TRAJ | csv-calc min,max --fields=,x,y --format=t,7d |
    #   csv-eval --format=2d --fields=minX,minY,maxX,maxY "x=maxX-minX+2;y=maxY-minY+2" |
    #   csv-shuffle --fields=,,,,x,y -o=x,y)
    # meanX=$($TRAJ | csv-calc mean --fields=,x --format=t,7d)
    # meanY=$($TRAJ | csv-calc mean --fields=,,y --format=t,7d)
    
    cat <(make_ground $sizeX $sizeY 0.5) <(make_ground 1 1 0.1) |
    # csv-eval --binary=3d,ui --fields=x,y,z "x=x+$radX;y=y+$radY" >$GROUND
    points-frame --binary=3d,ui --fields=x,y,z --from=$ref_frame > $GROUND
    $TRAJ |
    math-eigen rotation --from=quaternion --to=euler --fields=,,,,w,x,y,z |
    csv-shuffle --fields=t,x,y,z,qx,qy,qz,qw,roll,pitch,yaw --output-fields=x,y,z,roll,pitch,yaw |
    while read frame
    do
        $SENSOR | points-frame --binary=ui,7d --from=$frame --fields=,,x,y,z |
        points-frame --binary=ui,7d --from=$frame --fields=,,,,,x,y,z
    done | #csv-paste "-" "line-number" | csv-time --from=seconds --to=iso --fields=,,,,,,,t |
    #csv-from-bin 7d | csv-play --speed 100 | # --fields=,,,,,,,t |
    # points-frame --to $ref_frame --binary=ui,7d --fields=,,x,y,z |
    # points-frame --to $ref_frame --binary=ui,7d --fields=,,,,,x,y,z |
    # view-points "-;binary=ui,7d;fields=,scalar,first,second;shape=line;colour=0:15,jet;size=$size" "$GROUND;binary=3d,ui;fields=x,y,z" <($TRAJ | points-frame --fields=,x,y,z --to=$ref_frame)";fields=,x,y,z;colour=red"
    view-points "-;binary=ui,7d;fields=,scalar,first,second;shape=line;colour=0:15,jet;size=$size" "$GROUND;binary=3d,ui;fields=x,y,z" "$TRAJ;fields=,x,y,z;colour=red;weight=4" "$TEMPDIR/substand.bin;binary=3d,2ui;fields=x,y,z,scalar;colour=0:3,green:orange;size=11000000"
    
    rm $GROUND
}

function generate_tree() {
    seed=$1
    ARBARO=$2
    DIR=$3
    maxH=$4
    minH=$5
    verbose=$6
    density=20000
    
    mkdir -p temp_$seed
    cd temp_$seed
    
    OBJ=$DIR/$seed.obj
    
    [[ $verbose ]] && echo -n . >&2
    
    $ARBARO | java -jar $( dirname "${BASH_SOURCE[0]}" )/arbaro_cmd.jar --seed $seed -f OBJ -o $OBJ -q 2>/dev/null
    
    cat $OBJ | grep "^v" > verts.csv
    
    gLines=$(cat $OBJ | grep "^g" -n | sed 's/:g//' | sed -r 's/\s/:/g')
    lines=$(cat $OBJ | wc -l)
    
    id=$(cat $OBJ | grep "^g" -n | wc -l)
    
    for group in `echo "$gLines"`
    do
        set=$(echo "$gLines" | grep $group -A 1 | tr '\n' ':' | sed 's/:$/\n/')
        start=$(echo $set | cut -d: -f1)
        label=$(echo $set | cut -d: -f2)
        n=$(expr $lines - $start)
        
        e=$(echo $set | cut -d: -f3)
        if [[ $e ]]
        then
            end=$(expr $e - 1)
            d=$(expr $end - $start)
            cat verts.csv <(cat $OBJ | tail -$n | head -$d ) > $label.obj
        else
            cat verts.csv <(cat $OBJ | tail -$n) > $label.obj
        fi
        cloudcompare.CloudCompare -SILENT -NO_TIMESTAMP -C_EXPORT_FMT LAS -O $label.obj -SAMPLE_MESH DENSITY $density >/dev/null 2>/dev/null
        cat ${label}_SAMPLED_POINTS.las | las-to-csv points | csv-shuffle -f=x,y,z -o=x,y,z | csv-paste "-" "value=$id"
        id=$(expr $id - 1)
    done | csv-to-bin 3d,ui |
    points-frame --from "0,0,0,$(math-deg2rad 90),0,$(math-deg2rad 90)" --binary=3d,ui --fields=x,y,z | #this ends us up in NWU frame, but I guess I don't really care; easy to fix later.
    csv-select --binary=3d,ui --fields=x,y,z "z;greater=0" > $DIR/$seed.bin
    
    ## Filtering!
    size=$(cat $DIR/$seed.bin | csv-calc diameter --binary=3d,ui --fields=,,z | csv-from-bin d | cut -d. -f1)
    [[ $size -gt $maxH ]] && rm $DIR/$seed.obj  # Too big to be realistic
    [[ $size -gt $maxH ]] && rm $DIR/$seed.bin  # Too big to be realistic
    [[ $size -lt $minH ]] && rm $DIR/$seed.obj   # Too small to be realistic
    [[ $size -lt $minH ]] && rm $DIR/$seed.bin   # Too small to be realistic
    
    cd ..
    rm -rf temp_$seed
}

function go() {
    ARBARO=$1
    TRAJ=$2
    SENSOR=$3
    sizeN=$4
    sizeE=$5
    spaceN=$6
    spaceE=$7
    method=$8
    maxH=$9
    minH=${10}
    ref_frame=${11}
    noise=${12}
    
    radN=$(echo $sizeN | csv-eval --format=d --fields=x "x=x/2")
    radE=$(echo $sizeE | csv-eval --format=d --fields=x "x=x/2")
    
    species=$($ARBARO | name-value-get "arbaro/species/<xmlattr>/name")
    
    # ============ Generate trees in HD PC form ============ #
    TREES="$TEMPDIR/${species}_trees"
    
    mkdir -p $TREES
    
    nTrees=$(echo $sizeN,$sizeE,$spaceN,$spaceE | csv-eval --fields=a,b,c,d "x=round((a/c)*(b/d)*2)" --format=4d | csv-shuffle --fields=,,,,x -o=x)
    [[ $verbose ]] && echo "$nTrees trees needed" >&2
    # Should XARGS this bit.
    while [[ `ls $TREES | grep "\.bin" | wc -l` -lt $nTrees ]]
    do
        for i in `seq 8` ; do echo $RANDOM ; done |
        xargs -n1 -P8 -i bash -c "$(declare -f) ; generate_tree {} $ARBARO $TREES $maxH $minH $verbose"
    done
    [[ $verbose ]] && echo "" >&2
    
    [[ $verbose ]] && echo "$spaceN, $spaceE, $radN, $radE" >&2
    
    # ================== Construct stand ================== #
    points=$(if [[ $method == "orchard" ]]
        then
            for x in `seq 0 $spaceN $radN`
            do
                for y in `seq 0 $spaceE $radE` ; do echo "$x,$y,0.1" ; done
                for y in `seq -$spaceE -$spaceE -$radE` ; do echo "$x,$y,0.1" ; done
            done
            for x in `seq -$spaceN -$spaceN -$radN`
            do
                for y in `seq 0 $spaceE $radE` ; do echo "$x,$y,0.1" ; done
                for y in `seq -$spaceE -$spaceE -$radE` ; do echo "$x,$y,0.1" ; done
            done
        elif [[ $method == "forest" ]]
        then
            echo "0,0,0"
            error "Not yet implemented"
    fi )
    
    [[ $verbose ]] && echo "POINTS" >&2
    [[ $verbose ]] && echo "$points" >&2
    
    files=$(find $TREES | grep "\.bin$" | shuf | csv-paste "-" line-number)
    
    echo "trunk/x,trunk/y,trunk/z,id" > $TEMPDIR/trunks.csv
    
    [[ -f $TEMPDIR/ground.bin && ! $force ]] || make_ground $sizeN $sizeE 0.01 |
    csv-paste "-;binary=3d,ui" "value=0;binary=ui" > $TEMPDIR/ground.bin
    
    [[ $verbose ]] && echo "Ground finished" >&2
    
    for pt in `echo $points | tr ' ' '\n' | csv-paste "-" line-number`
    do
        point=$(echo $pt | cut -d, -f1-3)
        idx=$(echo $pt | cut -d, -f4)
        # mIdx=$(echo $idx | csv-eval --format=d --fields=i "i=i%($nf+1")
        tree=$(echo "$files" | grep ",$idx$" | cut -d, -f1)
        seed=$(echo $tree | grep -o "[0-9]*\.bin" | cut -d. -f1)
        echo "$point,$seed" >> $TEMPDIR/trunks.csv
        cat $tree | points-frame --binary=3d,ui --fields=x,y,z,i --from "$point" |
        csv-paste "-;binary=3d,ui" "value=$seed;binary=ui"
    done  |
    cat $TEMPDIR/ground.bin - | #Now, just convert from NWU (generated) to TRAJ frame
    # cat $TEMPDIR/ground.bin | #Now, just convert from NWU (generated) to TRAJ frame
    points-frame --binary=3d,2ui --fields=x,y,z --from=$ref_frame > $TEMPDIR/stand.bin
    [[ $verbose ]] && echo "Stand constructed" >&2
    
    # ================== Sample stand with sensor ================== #
    threshold=0.00005
    
    # cp $TEMPDIR/stand.bin temp.bin
    # view-points "temp.bin;binary=3d,2ui" "/home/fwes7558/src/tree-crops/phenotyping-lidar/virtualisation/zeb1.trajectory.csv;fields=,x,y,z" --size=24000000
    # exit
    
    export -f sample_sensor
    
    l=$($TRAJ | wc -l | csv-eval --format=d --fields=x "x=ceil(x/500)")
    for x in `seq $l` ; do echo -n "_" >&2 ; done
    echo -en "\r" >&2
    
    $TRAJ |
    math-eigen rotation --from=quaternion --to=euler --fields=,,,,w,x,y,z |
    csv-shuffle --fields=t,x,y,z,qx,qy,qz,qw,roll,pitch,yaw --output-fields=t,x,y,z,roll,pitch,yaw | #head -10 | #tr '\n' ' ' |
    # csv-eval --format=t,3d,3d --fields=,x,y,z "xMin=x-15;xMax=x+15;yMin=y-15;yMax=y+15;z Min=z-15;zMax=z+15"
    xargs -l500 -P 1 $SHELL "$0" -parallel $TEMPDIR/stand.bin $threshold $SENSOR | # Nutty workaround using flagged recursion.... but hey it works?
    # xargs -L 5 -n 5 -P 4 bash -c "sample_sensor $TEMPDIR/stand.bin $threshold $SENSOR" |
    # xargs -l500 -P 4 ~/src/tree-crops/phenotyping-lidar/virtualisation/zeb-par $TEMPDIR/stand.bin $threshold $SENSOR |
    csv-shuffle --binary=ui,d,3d,2ui --fields=i,r,x,y,z,cl,seg -o=x,y,z,cl,seg |
    # ~/src/tree-crops/phenotyping-lidar/virtualisation/add-noise --binary=3d,2ui --fields=x,y,z -s $noise |
    points-frame --binary=3d,2ui --fields=x,y,z --to=$ref_frame | # Convert back to NWU from TRAJ
    points-frame --binary=3d,2ui --fields=x,y,z --to="0,0,0,$(math-deg2rad 180),0,0" # Convert from NWU to NED
    
    [[ $verbose ]] && echo -e "\nView finished point cloud:" >&2
    [[ $verbose ]] && echo " | view-points --binary=3d,2ui --fields=x,y,z,scalar --colour=1:4,green:orange" >&2
}

function option-description
{
    cat <<eof
--arbaro=[<definition>]; default=avocado_xml; XML tree generation from Arbaro, by script name
--trajectory=[<traj>]; default=zeb1_traj; Sensor trajectory to follow, by script name
--sensor=[<sensor>]; default=build_ld_sensor; Definition of sensor plane at any point in trajectory, by script name
--size-north=[<length>]; default=44; number of metres to generate (North). (40)
--size-east=[<length>]; default=38; number of metres to generate (East). (36)
--spacing-north=[<length>]; default=10; [orchard] number of metres between trees (North)
--spacing-east=[<length>]; default=6; [orchard] number of metres between trees (East)
--max-height=[<height>]; default=10; Maximum size (m) of generated trees
--min-height=[<height>]; default=4; Maximum size (m) of generated trees
--frame=[<frame>]; default="-1.5,5,0,0,0,$(math-deg2rad 95)"; Reference frame in which the trajectory is, relative to point cloud convention.
--noise=[<stdev>]; default=0.02; noise level (stdev of gaussian distribution)
--verbose, -v; Output progress to stderr
--force, -f; Force recomputation of elements rather than using saved files (for when you change parameters)
eof
}

function usage
{
    cat <<eof

$name uses tree and LiDAR definitions to procedurally generate a point cloud
as if the defined sensor had scanned a set of random trees of the given species.
Outputs the finished point cloud to STDOUT.
Also creates a temporary directory to store intermediate files.

usage: $name <operation> [options]

<operation>:
  sensor
    Visualise the sensor trajectory against a procedurally generated PC.
  orchard
    Generate a point cloud in an orchard setting (gridded trees, north-east aligned)
  forest
    Generate a point cloud in a forest setting (randomly placed trees)
options:
$( option-description  | sed 's/^/    /g' )

eof
    exit 1
    
}

if [ "$1" = "-parallel" ]; then
    shift 1
    sample_sensor "$@"
    exit $?
fi


if (( $( comma_options_has --help $@ ) || $( comma_options_has -h $@ ) )) ; then usage ; fi
options=$( option-description | comma-options-to-name-value "$@" ) || error "invalid command line options"
comma_path_value_to_var --prefix="options" <<< "$options"
eval "$( option-description | comma-options-to-name-value "$@" | comma_path_value_mangle )"

(( $( comma_options_has --verbose "$@" ) )) && export readonly verbose=true
(( $( comma_options_has --force "$@" ) )) && export readonly recompute=true

set -e # Kill if anything errors out; we don't want it to run everything on bad datasets

export TEMPDIR="~/data/gpc_temp"
mkdir -p $TEMPDIR

if [[ "$1" = "sensor" ]]
then
  go_sensor $options_arbaro $options_trajectory $options_sensor $options_frame $options_size_north $options_size_east $options_noise
elif [ "$1" = "orchard" -o "$1" = "forest" ]
then
  go $options_arbaro $options_trajectory $options_sensor $options_size_north $options_size_east $options_spacing_north $options_spacing_east $1 $options_max_height $options_min_height $options_frame $options_noise
else
  error "Unknown operation \"$1\""
fi
