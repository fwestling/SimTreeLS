#!/bin/bash

# Given an obj file, samples it to get it as a high-quality CSV.

export readonly name=$(basename $0)

source $(type -p comma-application-util) || (error "comma not installed")
function errcho() { (echo >&2 "$name: $1"); }
function error() {
	errcho "error: $1"
	exit 1
}

function convert() {
	OBJ=$1
	# TODO handle "g" fields as well

	cat $OBJ | grep "^v" >verts.csv
	cat $OBJ | grep '^v' | sed 's/v //' | tr ' ' ',' | csv-to-bin 3d | csv-paste "-;binary=3d" line-number | csv-eval --binary=3d,ui --fields=,,,i "i=i+1" >vertices.bin

	if [[ $(cat $OBJ | grep "^g") ]]; then

		gLines=$(cat $OBJ | grep "^g" -n | sed 's/:g//' | sed -r 's/\s/:/g')
		lines=$(cat $OBJ | wc -l)
		id=$(cat $OBJ | grep "^g" -n | wc -l)

		for group in $(echo "$gLines"); do
			set=$(echo "$gLines" | grep $group -A 1 | tr '\n' ':' | sed 's/:$/\n/')
			start=$(echo $set | cut -d: -f1)
			label=$(echo $set | cut -d: -f2)
			e=$(echo $set | cut -d: -f3)
			n=$(expr $lines - $start)
			if [[ $e ]]; then
				end=$(expr $e - 1)
				d=$(expr $end - $start)
				cat $OBJ | tail -$n | head -$d >$id.obj
			else
				cat $OBJ | tail -$n >$id.obj
			fi
			id=$(expr $id - 1)
		done
	else
		cp $OBJ 0.obj
	fi
	for f in $(ls *.obj); do
		i=$(echo $f | cut -d. -f1)
		[[ $verbose ]] && echo "Processing group $i" >&2
		# Turns quads into triangles by arbitrary splitting
		# Turns triangles into quads, cause otherwise shit goes bad.
		# I don't know how to do this right though, if the order is wrong then this doesn't work
		# To make sure the shape is closed, I do all possible triangles; this will lead to oversampling, but the shape is at least closed.
		cat $f | grep '^f' | sed 's/f //' | tr ' ' ',' |
			sed -r 's/^([^,]*),([^,]*),([^,]*),([^,]*)$/\1,\2,\3\n\1,\3,\4\n\1,\2,\4\n\2,\3,\4/' |
			csv-to-bin 3ui |
			csv-join --fields=id --binary=3ui "vertices.bin;binary=3d,ui;fields=,,,id" |
			csv-join --fields=,id --binary=3ui,3d,ui "vertices.bin;binary=3d,ui;fields=,,,id" |
			csv-join --fields=,,id --binary=3ui,3d,ui,3d,ui "vertices.bin;binary=3d,ui;fields=,,,id" |
			csv-shuffle -b=3ui,3d,ui,3d,ui,3d,ui -f=a,b,c,xa,ya,za,,xb,yb,zb,,xc,yc,zc -o=xa,ya,za,xb,yb,zb,xc,yc,zc |
			csv-paste "value=$i;binary=ui" "-;binary=9d"
	done

}

function option-description() {
	cat <<eof
--verbose, -v; Output progress to stderr
eof
}

function usage() {
	cat <<eof

$name turns an obj file into a binary list of triangle coordinates in ui,9d format (the UI is ID if g is included, 0 otherwise)
Also creates a temporary directory to store intermediate files.

Currently only the simplest of OBJ files are supported - simple vertices, groups and faces (quads or tris) are accepted, but no curves, no textures, etc.

usage: $name obj [options]

Example:
cube.obj:
    v 0.000000 2.000000 2.000000
    v 0.000000 0.000000 2.000000
    v 2.000000 0.000000 2.000000
    v 2.000000 2.000000 2.000000
    v 0.000000 2.000000 0.000000
    v 0.000000 0.000000 0.000000
    v 2.000000 0.000000 0.000000
    v 2.000000 2.000000 0.000000
	g one
    f 1 2 3 4
	g two
    f 8 7 6 5
	g three
    f 4 3 7 8
	g four
    f 5 1 4 8
	g five
    f 5 6 2 1
	g six
    f 2 6 7 3
obj-to-tri cube.obj | view-points --binary=ui,9d --fields=id,corners --shape=triangle

options:
$(option-description | sed 's/^/    /g')

eof
	exit 1

}

if [ "$1" = "-parallel" ]; then
	shift 1
	sample_sensor "$@"
	exit $?
fi

if (($(comma_options_has --help $@) || $(comma_options_has -h $@))); then usage; fi
options=$(option-description | comma-options-to-name-value "$@") || error "invalid command line options"
comma_path_value_to_var --prefix="options" <<<"$options"
eval "$(option-description | comma-options-to-name-value "$@" | comma_path_value_mangle)"

(($(comma_options_has --verbose "$@"))) && export readonly verbose=true

# set -e # Kill if anything errors out; we don't want it to run everything on bad datasets

wherewasi=$(pwd)
fullfilename=$(readlink -f $1)
# export TEMPDIR=`mktemp -d`
export TEMPDIR=$(mktemp -d)
cd $TEMPDIR

[[ $verbose ]] && echo "Created $TEMPDIR" >&2

convert $fullfilename

cd $wherewasi

[[ $verbose ]] && echo "Deleting $TEMPDIR" >&2

rm -rf $TEMPDIR
