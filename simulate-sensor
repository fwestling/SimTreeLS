#!/bin/bash

# Generate a point cloud using a virtual sensor, trajectory, and Arbaro definition.

export readonly name=$(basename $0)

source $(type -p comma-application-util) || (error "comma not installed")
function errcho() { (echo >&2 "$name: $1"); }
function error() {
    errcho "error: $1"
    exit 1
}

function sample_sensor() {
    # echo "ARGS: $@" >&2
    PC=$1
    shift
    threshold=$1
    shift
    SENSOR=$1
    shift

    echo -n "." >&2
    i=0
    for line in $@; do
        ts=$(echo $line | cut -d, -f1)
        frame=$(echo $line | cut -d, -f2-7)
        center=$(echo $line | cut -d, -f2-4)
        # criteria=$(echo $line | cut -d, -f8- |
        # 	sed -r 's/([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+)/x;from=\1;to=\2 y;from=\3;to=\4 z;from=\5;to=\6/')
        i=$(expr $i + 1)
        $SENSOR |
            points-frame --from=$frame --binary=ui,7d --fields=,,x,y,z |
            points-frame --from=$frame --binary=ui,7d --fields=,,,,,x,y,z |
            csv-paste "-;binary=ui,7d" "value=$i;binary=ui"
        #		points-join --binary=ui,7d --fields=,,x,y,z --radius=0.05 <(cat $PC | csv-select --binary=3d,2ui --fields=x,y,z $criteria)";binary=3d,2ui;fields=x,y,z" --all 2>/dev/null
        # points-join --binary=ui,7d,ui --fields=,,x,y,z --radius=0.05 "$PC;binary=3d,2ui;fields=x,y,z" --all 2>/dev/null
    done |
        points-join --binary=ui,7d,ui --fields=,,x,y,z --radius=0.05 "$PC;binary=3d,2ui;fields=x,y,z" --all 2>/dev/null |
        points-calc distance --binary=ui,7d,ui,3d,2ui --fields=,,first,second |
        points-calc distance --binary=ui,7d,ui,3d,2ui,d --fields=,,first,,,,,second |
        points-calc distance --binary=ui,7d,ui,3d,2ui,2d --fields=,,,,,first,,second |
        csv-shuffle --binary=ui,7d,ui,3d,2ui,3d --fields=i,r,,,,,,,uid,x,y,z,cl,seg,d1,d2,d3 -o=uid,i,r,x,y,z,d1,d2,d3,cl,seg |
        csv-eval --binary=2ui,d,3d,3d,2ui --fields=,,,,,,a,b,c "d=where(abs(b+c-a) < $threshold,1,0)" --output-format=ui |
        csv-select --binary=2ui,d,3d,3d,3ui --fields=,,,,,,,,,,,d "d;equals=1" |
        csv-shuffle --binary=2ui,d,3d,3d,3ui --fields=uid,i,r,x,y,z,,,,cl,seg -o=uid,i,r,x,y,z,cl,seg |
        csv-sort --binary=2ui,d,3d,2ui --fields=id,id,r --min |
        csv-shuffle --binary=2ui,d,3d,2ui --fields=,i,r,x,y,z,cl,seg -o=i,r,x,y,z,cl,seg
    [[ $verbose ]] && echo "$i" >&2
}

function go_sensor() {
    STAND=$1
    TRAJ=$2
    SENSOR=$3
    ref_frame=$4
    TEMPSTAND=$(mktemp)
    TEMPTRAJ=$(mktemp)
    size=$($SENSOR | csv-from-bin ui,7d | wc -l | csv-eval --fields=x "x=x*2" --format=ui)
    [[ $verbose ]] && echo "Saving trajectory in $TEMPTRAJ..." >&2

    $TRAJ >$TEMPTRAJ

    [[ $verbose ]] && echo "Generating tempfile $TEMPSTAND..." >&2
    cat $STAND |
        #     # csv-eval --binary=3d,ui --fields=x,y,z "x=x+$radX;y=y+$radY" >$GROUND
        # points-frame --binary=3d,2ui --fields=x,y,z --from=$ref_frame
        csv-thin 0.05 --binary=3d,2ui >$TEMPSTAND
    [[ $verbose ]] && echo "Generated" >&2
    $TRAJ | csv-thin 0.5 |
        math-eigen rotation --from=quaternion --to=euler --fields=,,,,w,x,y,z |
        csv-shuffle --fields=t,x,y,z,qx,qy,qz,qw,roll,pitch,yaw --output-fields=x,y,z,roll,pitch,yaw |
        while read frame; do
            $SENSOR | points-frame --binary=ui,7d --from=$frame --fields=,,x,y,z |
                points-frame --binary=ui,7d --from=$frame --fields=,,,,,x,y,z
        done | #csv-paste "-" "line-number" | csv-time --from=seconds --to=iso --fields=,,,,,,,t |
        #csv-from-bin 7d | csv-play --speed 100 | # --fields=,,,,,,,t |
        # points-frame --to $ref_frame --binary=ui,7d --fields=,,x,y,z |
        # points-frame --to $ref_frame --binary=ui,7d --fields=,,,,,x,y,z |
        # view-points "-;binary=ui,7d;fields=,scalar,first,second;shape=line;colour=0:15,jet;size=$size" "$GROUND;binary=3d,ui;fields=x,y,z" <($TRAJ | points-frame --fields=,x,y,z --to=$ref_frame)";fields=,x,y,z;colour=red"
        view-points "-;binary=ui,7d;fields=,scalar,first,second;shape=line;colour=0:15,jet;size=$size" "$TEMPSTAND;binary=3d,2ui;fields=x,y,z,scalar;colour=0:4,green:orange;size=6000000" "$TEMPTRAJ;fields=,x,y,z;colour=red;weight=5" --background-color=white --camera-config=nice.camera

    rm $TEMP $TEMPTRAJ
}

function go() {
    STAND=$1
    TRAJ=$2
    SENSOR=$3
    ref_frame=$4
    noise=$5

    # ================== Sample stand with sensor ================== #
    threshold=0.00005

    # $TRAJ | view-points "$STAND;binary=3d,2ui;fields=x,y,z,scalar,id;colour=-1:5,jet" "-;fields=,x,y,z" --size=24000000 --background-colour=white
    # exit

    export -f sample_sensor

    l=$($TRAJ | wc -l | csv-eval --format=d --fields=x "x=ceil(x/500)")
    for x in $(seq $l); do echo -n "_" >&2; done
    echo -en "\r" >&2

    $TRAJ | csv-thin 0.25 |
        math-eigen rotation --from=quaternion --to=euler --fields=,,,,w,x,y,z |
        csv-shuffle --fields=t,x,y,z,qx,qy,qz,qw,roll,pitch,yaw --output-fields=t,x,y,z,roll,pitch,yaw | #head -10 | #tr '\n' ' ' |
        # csv-eval --format=t,3d,3d --fields=,x,y,z "xMin=x-15;xMax=x+15;yMin=y-15;yMax=y+15;z Min=z-15;zMax=z+15"
        xargs -l500 -P 1 $SHELL "$0" -parallel $STAND $threshold $SENSOR | # Nutty workaround using flagged recursion.... but hey it works?
        # xargs -L 5 -n 5 -P 4 bash -c "sample_sensor $TEMPDIR/stand.bin $threshold $SENSOR" |
        # xargs -l500 -P 4 ~/src/tree-crops/phenotyping-lidar/virtualisation/zeb-par $TEMPDIR/stand.bin $threshold $SENSOR |
        csv-shuffle --binary=ui,d,3d,2ui --fields=i,r,x,y,z,cl,seg -o=x,y,z,cl,seg |
        # ~/src/tree-crops/phenotyping-lidar/virtualisation/add-noise --binary=3d,2ui --fields=x,y,z -s $noise |
        points-frame --binary=3d,2ui --fields=x,y,z --to=$ref_frame |                    # Convert back to NWU from TRAJ
        points-frame --binary=3d,2ui --fields=x,y,z --to="0,0,0,$(math-deg2rad 180),0,0" # Convert from NWU to NED

    [[ $verbose ]] && echo -e "\nView finished point cloud:" >&2
    [[ $verbose ]] && echo " | view-points --binary=3d,2ui --fields=x,y,z,scalar --colour=1:4,green:orange" >&2
}

function option-description() {
    cat <<eof
--trajectory=[<traj>]; default=zeb1_traj; Sensor trajectory to follow, by script name
--sensor=[<sensor>]; default=build_hd_sensor; Definition of sensor plane at any point in trajectory, by script name
--frame=[<frame>]; default="-1.5,5,0,0,0,$(math-deg2rad 95)"; Reference frame in which the trajectory is, relative to point cloud convention.
--noise=[<stdev>]; default=0.02; noise level (stdev of gaussian distribution)
--verbose, -v; Output progress to stderr
--visualise; Just see what it would look like
eof
}

function usage() {
    cat <<eof

$name uses LiDAR definitions to sample a point cloud
as if the defined sensor had scanned a set of random trees of the given species.
The input should be output from generate-stand ideally.
Outputs the finished point cloud to STDOUT.
Also creates a temporary directory to store intermediate files.

usage: $name pointcloud [options]

options:
$(option-description | sed 's/^/    /g')

eof
    exit 1

}

if [ "$1" = "-parallel" ]; then
    shift 1
    sample_sensor "$@"
    exit $?
fi

if (($(comma_options_has --help $@) || $(comma_options_has -h $@))); then usage; fi
options=$(option-description | comma-options-to-name-value "$@") || error "invalid command line options"
comma_path_value_to_var --prefix="options" <<<"$options"
eval "$(option-description | comma-options-to-name-value "$@" | comma_path_value_mangle)"

(($(comma_options_has --verbose "$@"))) && export readonly verbose=true
(($(comma_options_has --visualise "$@"))) && export readonly visualise=true

set -e # Kill if anything errors out; we don't want it to run everything on bad datasets

if [[ $visualise ]]; then
    go_sensor $1 $options_trajectory $options_sensor $options_frame
else
    go $1 $options_trajectory $options_sensor $options_frame $options_noise
fi
